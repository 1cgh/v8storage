#Использовать asserts
#Использовать "../src"

Функция ПолучитьСписокТестов(Тестирование) Экспорт
    
    Список = Новый Массив;
   	//Список.Добавить("Тест_ДолженПроверитьЧтоКонфигурацияРазобранаНаИсходники");
   	//Список.Добавить("Тест_ДолженПроверитьЧтоКонфигурацияСобранаИзИсходников");
    Список.Добавить("Тест_ДолженСформироватьОтчетПоХранилищю");
	Список.Добавить("Тест_ДолженПолучитьВерсиюИзХранилища");
    //Список.Добавить("Тест_ДолженПроверитьЧтоСозданыФайлыКонфигурацииПоставщика");
    //Список.Добавить("Тест_ДолженПроверитьЧтоСозданДистрибутив");
    //Список.Добавить("Тест_ДолженПроверитьЧтоСозданАрхивДистрибутива");
    //Список.Добавить("Тест_ДолженПроверитьЧтоВерсияПолученаСПомощьюTool1CD");
    
    Возврат Список;
    
КонецФункции


Процедура ПослеЗапускаТеста() Экспорт
    ВременныеФайлы.Удалить();
КонецПроцедуры

Процедура Тест_ДолженПроверитьЧтоКонфигурацияРазобранаНаИсходники() Экспорт

	// ФайлКонфигурации = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0","1Cv8.cf");
	
	// ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
   
   	// РазборщикКонфигурации = Новый МенеджерРазборкиКонфигурацииНаИсходники;
	// РазборщикКонфигурации.РазобратьФайлКонфигурации(ФайлКонфигурации, ВременныйКаталог);
		
КонецПроцедуры

Процедура Тест_ДолженПроверитьЧтоКонфигурацияСобранаИзИсходников() Экспорт

	// ФайлКонфигурации = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1.0","1Cv8.cf");
	
	// ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
   	// ВременныйКаталогКонфигурации = ВременныеФайлы.СоздатьКаталог();
   	
	// РазборщикКонфигурации = Новый МенеджерРазборкиКонфигурацииНаИсходники;
	// РазборщикКонфигурации.РазобратьФайлКонфигурации(ФайлКонфигурации, ВременныйКаталог);
	
	// НовыйФайлКонфигурации = ОбъединитьПути(ВременныйКаталогКонфигурации, "1Cv8.cf");
	
	
	// СборщикКонфигурации = Новый МенеджерСборкиКонфигурацииИзИсходников;
	// СборщикКонфигурации.СобратьФайлКонфигурации(ВременныйКаталог, НовыйФайлКонфигурации);
	
	// ФайлТест = Новый Файл(НовыйФайлКонфигурации);
    // Ожидаем.Что(ФайлТест.Существует(), "файл конфигурации должен существовать"); 
   

	// Сделать сравнение 2-х файлов через hash

КонецПроцедуры

Процедура Тест_ДолженСформироватьОтчетПоХранилищю() Экспорт
	
	
	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации;
	ХранилищеКонфигурации.УстановитьКаталогХранилища(ПутьКВременномуФайлуХранилища1С());
	ХранилищеКонфигурации.УстановитьПараметрыАвторитизации("Администратор", "");
	ХранилищеКонфигурации.ПрочитатьХранилище();

	ТаблицаВерсий = ХранилищеКонфигурации.ПолучитьТаблицаВерсий();
	Ожидаем.Что(ТаблицаВерсий.Количество(), "Не правильное количество версии в таблице").Равно(3);
КонецПроцедуры


Процедура Тест_ДолженПолучитьВерсиюИзХранилища() Экспорт
	
	ПутьКФайлуCF = ВременныеФайлы.НовоеИмяФайла("cf");
   
	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации;
	ХранилищеКонфигурации.УстановитьКаталогХранилища(ПутьКВременномуФайлуХранилища1С());
	ХранилищеКонфигурации.УстановитьПараметрыАвторитизации("Администратор", "");
	ХранилищеКонфигурации.СохранитьВерсиюКонфигурацииВФайл(2, ПутьКФайлуCF);
	
	Ожидаем.Что(Новый Файл(ПутьКФайлуCF), "Файл версии не существует").Существует();
КонецПроцедуры

Функция ПутьКВременномуФайлуХранилища1С()
	
	Возврат ОбъединитьПути(КаталогFixtures(), "storage");
	
КонецФункции

Функция КаталогFixtures()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures");
КонецФункции
