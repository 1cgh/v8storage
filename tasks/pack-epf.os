Перем ИндексКлассов;
Перем КаталогBin;
Перем КаталогКлассов;

Процедура ВыполнитьЗапаковку()
	
	ТекущийКаталогЗадачи = ТекущийСценарий().Каталог;

	КаталогПроекта = Новый Файл(ОбъединитьПути(ТекущийКаталогЗадачи, "..")).ПолноеИмя;

	КаталогКлассов = ОбъединитьПути(КаталогПроекта, "./src/Классы/internal/Классы");
	КаталогBin = ОбъединитьПути(КаталогПроекта, "./bin");

	// МассивФайловКаталоговВерсий = НайтиФайлы(КаталогBin, ПолучитьМаскуВсеФайлы());

	ИндексКлассов = Новый Соответствие;

	// Для каждого ФайлКаталогаВерсии Из МассивФайловКаталоговВерсий Цикл
		
	// 	Если Не ФайлКаталогаВерсии.ЭтоКаталог() Тогда
	// 		Продолжить;
	// 	КонецЕсли;
		
	ОбработатьКаталогВерсии(КаталогBin);

	// КонецЦикла;

	ЗаписатьКлассИндексаЗапаковки(ИндексКлассов);

КонецПроцедуры

Процедура ЗаписатьКлассИндексаЗапаковки(ИндексКлассов)

	ТекстБлока = "Функция ПолучитьИндексФайлов() Экспорт
	|
	|	ИндексФайлов = Новый Соответствие;
	|";

	Для каждого ДанныеВерсии Из ИндексКлассов Цикл
		
		ТекстБлока = ТекстБлока + ПолучитьТекстБлокаДляВерсии(ДанныеВерсии.Ключ, ДанныеВерсии.Значение);
		
	КонецЦикла;
	ТекстБлока = ТекстБлока + "
	|	
	|	Возврат ИндексФайлов;
	|
	|КонецФункции";

	ФайлКлассаМенеджерЗапакованныхФайлов = ОбъединитьПути(КаталогКлассов, "МенеджерЗапакованныхФайлов.os");
	
	ЗаписьТекста = Новый ЗаписьТекста(ФайлКлассаМенеджерЗапакованныхФайлов);
	ЗаписьТекста.ЗаписатьСтроку(ТекстБлока);
	ЗаписьТекста.Закрыть();

	Сообщить("Обработки запакованы в классы");

КонецПроцедуры

Функция ПолучитьТекстБлокаДляВерсии(Знач ВерсияФайла, Знач ДанныеФайла)
	
	Если ДанныеФайла.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;

	ШаблонТекст = "
	|	ИндексФайлов.Вставить(""%1_%2"", ""%3"");
	|";

	ТекстБлокаВерсии = "";

	Для каждого ФайлВерсии Из ДанныеФайла Цикл
	
		ТекстФайлаВерсии = СтрШаблон(ШаблонТекст, ФайлВерсии.Файл, ВерсияФайла,  ФайлВерсии.Класс);
		ТекстБлокаВерсии = ТекстБлокаВерсии + ТекстФайлаВерсии;
		
	КонецЦикла;
	
	Возврат ТекстБлокаВерсии;

КонецФункции 

Процедура ОбработатьКаталогВерсии(Знач ФайлКаталогаВерсии)
	
	ИмяКаталога = "1_0_0";
	ВерсияФайлов = СтрЗаменить(ИмяКаталога, "_", ".");

	МассивФайловDll = НайтиФайлы(ФайлКаталогаВерсии, "*.epf");

	МассивЗапакованныхКлассов = Новый Массив;

	Для каждого ФайлDll Из МассивФайловDll Цикл
	
		Если ФайлDll.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		ИмяФайлаDll = СтрЗаменить(ФайлDll.ИмяБезРасширения, ".", "_");
		ПолныйПутьКФайлуDll = ФайлDll.ПолноеИмя;

		ИмяКлассаDll = СтрШаблон("%1_%2", ИмяФайлаDll, СтрЗаменить(ИмяКаталога, ".", "_"));

		ПутьКФайлуКласса = ОбъединитьПути(КаталогКлассов, ИмяКлассаDll + ".os");
		ДанныеФайла = ПолучитBase64Строка(ПолныйПутьКФайлуDll);
		ХешСтрока = ПолучитьХешСтроку(ПолныйПутьКФайлуDll);

		ЗаписатьКласс(ПутьКФайлуКласса, ФайлDll.Имя, ВерсияФайлов, ХешСтрока, ДанныеФайла);

		МассивЗапакованныхКлассов.Добавить(Новый Структура("Файл, Класс", ИмяФайлаDll , ИмяКлассаDll));

	КонецЦикла;

	ИндексКлассов.Вставить(ВерсияФайлов, МассивЗапакованныхКлассов);

КонецПроцедуры

Функция ПолучитьХешСтроку(ПутьКФайлу)

	ХешФайла = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешФайла.ДобавитьФайл(ПутьКФайлу);

	Возврат ХешФайла.ХешСуммаСтрокой;

КонецФункции

Процедура ЗаписатьКласс(ПутьКФайлуКласса, ИмяФайла, ВерсияФайла, ХешСтрока, ДанныеФайла)

	ШаблонТекст = "
	|///////////////////////////////////////////
	|//       ФАЙЛ СОЗДАН АВТОМАТИЧЕСКИ       //
	|///////////////////////////////////////////
	|//
	|// ФАЙЛ: <%1>
	|//
	|
	|// Возвращает версию запакованного файла
	|//
	|Функция Версия() Экспорт
	|	Возврат ""%2"";
	|КонецФункции
	|
	|// Возвращает имя запакованного файла
	|//
	|Функция ИмяФайла() Экспорт
	|	Возврат ""%1"";
	|КонецФункции
	|
	|// Возвращает хеш строку запакованного файла
	|//
	|Функция Хеш() Экспорт
	|	Возврат ""%3"";
	|КонецФункции
	|
	|// Возвращает запакованные данные файла
	|//
	|Функция ДвоичныеДанные() Экспорт
	|	ЗапакованныеДанные = ""%4"";
	|	Возврат ЗапакованныеДанные;
	|КонецФункции
	|
	|";

	ТекстКласса = СтрШаблон(ШаблонТекст, ИмяФайла, ВерсияФайла, ХешСтрока, ДанныеФайла);

	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлуКласса);
	ЗаписьТекста.ЗаписатьСтроку(ТекстКласса);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ПолучитBase64Строка(ПутьКФайлу)

	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
	Строка = Base64Строка(ДвоичныеДанныеФайла);
	Возврат Строка;

КонецФункции

ВыполнитьЗапаковку();