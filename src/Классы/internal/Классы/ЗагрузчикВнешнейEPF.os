#Использовать logos
#Использовать semver

Перем Лог;

#Область ПрограммныйИнтерфейс

Функция ПолучитьПутьКФайлу() Экспорт

	ЗапакованныеДанные = ПолучитьДанныеDLL();

	Для каждого КлючЗначение Из ЗапакованныеДанные Цикл

		ЗапакованнаяDLL = КлючЗначение.Значение;

		Если ЗапакованнаяDLL = Неопределено Тогда
			ВызватьИсключение "Не удалось найти двоичные данные для файла <ОбработкаКонвертацииMXLJSON.epf>";
		КонецЕсли;	
	
		НайтиФайлИлиРаспаковать(ЗапакованнаяDLL);

	КонецЦикла;
	
	ПутьКФайлу = ПолучитьПутьКФайлуDLL(ЗапакованныеДанные.ОбработкаКонвертацииMXLJSON.ИмяФайла(), ЗапакованныеДанные.ОбработкаКонвертацииMXLJSON.Версия());

	Возврат ПутьКФайлу;

КонецФункции

#КонецОбласти

#Область Упакованные_dll

Процедура РаспаковатьДанныеDLL(Знач ПутьКФайлу, ДанныеDLL)
	
	ДвоичныеДанные = Base64Значение(ДанныеDLL.ДвоичныеДанные());
	
	ОбеспечитьКаталог(ПутьКФайлу);
		
	ДвоичныеДанные.Записать(ПутьКФайлу);

КонецПроцедуры

Функция ВычислитьХешФайла(Знач ПутьКФайлу)

	ХешФайла = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешФайла.ДобавитьФайл(ПутьКФайлу);

 	Возврат ХешФайла.ХешСуммаСтрокой;
	
КонецФункции

Процедура НайтиФайлИлиРаспаковать(ДанныеDLL)
	
	ИмяФайла = ДанныеDLL.ИмяФайла();
	
	ПутьКФайлу = ПолучитьПутьКФайлуDLL(ИмяФайла, ДанныеDLL.Версия());

	ВременныйФайл = Новый Файл(ПутьКФайлу);

	Если Не ВременныйФайл.Существует() 
		Тогда// ИЛИ Не ВычислитьХешФайла(ПутьКФайлу) = ДанныеDll.Хеш() Тогда
		РаспаковатьДанныеDLL(ПутьКФайлу, ДанныеDLL);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПутьКФайлуDLL(ИмяФайла, ВерсияФайла)
	ПутьКФайлу = ОбъединитьПути(КаталогВременныхФайлов(), ".v8storage", СтрЗаменить(ВерсияФайла, ".", "_"), ИмяФайла);
	Возврат ПутьКФайлу;
КонецФункции

Процедура ОбеспечитьКаталог(ПутьККаталогу)
	
	ВременныйКаталог = Новый Файл(ПутьККаталогу);

	Если ВременныйКаталог.Существует() Тогда
		Возврат;
	КонецЕсли;

	СоздатьКаталог(ВременныйКаталог.Путь);

КонецПроцедуры

Функция ПолучитьДанныеDLL()
	
	СИ = Новый СистемнаяИнформация;
	ТекущаяВерсия = Новый Версия(СИ.Версия);

	ИндексВерсийДЛЛ = Новый Соответствие;
	ИндексВерсийДЛЛ.Вставить("1.0.0", ">=1.0.19");

	МассивПодходящихВерсийДЛЛ = Новый Массив;

	Для каждого ВерсияПроверки Из ИндексВерсийДЛЛ Цикл
		
		ДиапазонСравнения = ВерсияПроверки.Значение;
		ВерсияПроверкиДЛЛ = ВерсияПроверки.Ключ;
		Результат = Версии.ВерсияВДиапазоне(ТекущаяВерсия, ДиапазонСравнения);

		Если Результат Тогда
			МассивПодходящихВерсийДЛЛ.Добавить(ВерсияПроверкиДЛЛ);
		КонецЕсли;

	КонецЦикла;

	ВерсияДЛЛ = Версии.МаксимальнаяИзМассива(МассивПодходящихВерсийДЛЛ);

	// ВерсияДЛЛ = СтрЗаменить(ВерсияДЛЛ, ".", "_");
	
	МенеджерЗапакованныхФайлов = Новый МенеджерЗапакованныхФайлов;
	ИндексФайлов = МенеджерЗапакованныхФайлов.ПолучитьИндексФайлов();
	ОбработкаКонвертацииMXLJSON = ПолучитьКлассФайла(ИндексФайлов, СтрШаблон("%1_%2","ОбработкаКонвертацииMXLJSON", ВерсияДЛЛ));

	ДанныеDLL = Новый Структура("ОбработкаКонвертацииMXLJSON", ОбработкаКонвертацииMXLJSON);

	Возврат ДанныеDLL;

КонецФункции

Функция ПолучитьКлассФайла(ИндексФайлов, Знач ИмяФайла)

	Лог.Отладка("Получение двоичных данных для файла ключ запроса <%1>", ИмяФайла);

	ИмяКлассаФайла = ИндексФайлов[ИмяФайла];

	Если ИмяКлассаФайла = Неопределено Тогда
		Лог.Отладка("Получение двоичных данных для файла ключ запроса <%1> не удалось", ИмяФайла);
		Возврат Неопределено;
	КонецЕсли;

	Возврат Новый (ИмяКлассаФайла);

КонецФункции

#КонецОбласти

Лог = Логирование.ПолучитьЛог("oscript.lib.v8storage");
// Лог.УстановитьУровень(УровниЛога.Отладка);